{"version":3,"sources":["Controllers/GraphSolutionController.ts","Solvers/Solvers.ts","Controllers/GridController.ts","Controllers/LessonController.ts","Controllers/CanvasInfo.ts","Controllers/ExpandedObstacles.ts","Controllers/SegmentRectacleIntersection.ts","Controllers/VisibilityGraphController.ts","Controllers/VoronoiController.ts","Obstacles/ObstacleSets.ts","Solvers/SimpleGraphSolver.ts","Solvers/AStarSolver.ts","Controllers/ObstaclesController.ts","NumberColors.ts","Graphics/Hero.ts","Graphics/DemoColors.ts","Graphics/Obstacle.ts","Graphics/Princess.ts","Graphics/PixiDrawManager.ts","Views/ActionsViewer.tsx","Views/SolverView.tsx","styles.ts","Views/DemoPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["GraphSolutionController","drawManager","solution","drawSolution","isUndefined","graph","soln","explorationOrder","forEach","edge","index","setTimeout","glowEdge","vertices","get","v1","v2","map","p","length","Graph","adjecent","Map","GridAlgorithmsController","solver","obstaclesController","canvas","setActions","squareSize","gridWidth","this","width","gridHeight","height","solutionController","availablityGrid","Array","fill","undefined","initializeGrid","overGrid","i","j","drawDelayedSquare","name","fn","computeAccessibleSquares","isAccessible","hitsAnyObstacle","position","x","y","dimensions","uuidv4","drawGraph","addNeighboursToGraph","solve","type","DrawSquare","size","Math","sqrt","drawObstacles","gridGraph","currentId","set","adj","addIfNotUndefined","xx","yy","v","push","provider","a","b","c","d","e","LessonController","pos1","pos2","pos3","pos4","moveTo","node","moveHero","n","heroPosition","princessPosition","inCanvasFilter","ExpandedObstacles","expandedObstacles","init","obstacles","obstacle","drawObs","expandObstacleForDrawing","expandedObstacle","heroSize","draw","drawObstacleUnavailable","hitsAny","pos","res","obs","hitsObstacle","SegmentIntersectionCalculator","ge","intresectsLine","p1","p2","minX","min","maxX","max","minY","maxY","dx","abs","slope","offset","tmp","console","log","VisibilityGraphController","intersectionCalc","showInaccessible","computeSolution","allPoints","all","flatMap","concat","filter","toString","isViableLine","result","VoronoiController","showExpandedObstacles","expandBox","density","points","expandPoint","gr","voronoi","isInCavas","positions","drawPos","cells","cell","nextPos","findIndex","best","bestDist","point","dist","sqDist","xdist","ydist","GraphSolverMode","AStarSolver","start","goal","distance","goalPoint","visitedNodes","Set","nodesToProcess","Collections","n1","path","n2","c1","c2","enqueue","dequeue","currentNode","has","add","id","isEmpty","SimpleGraphSolver","randomizeOrder","mode","BFS","shift","pop","adjecentNodes","shuffle","ObstaclesController","_obstacles","key","drawObstacle","sq","obstaclesIntersect","o1","o2","l1","r1","l2","r2","initializeObstacles","obstacleSet","clear","NumberColors","Hero","heroGroup","PIXI","initHeroGraphic","heroBody","from","heroHands","gsap","to","pixi","positionY","duration","repeat","yoyo","eyes","beginFill","drawCircle","positionX","ease","Power4","easeInOut","addChild","scale","DemoColors","border","Colors","borderShadow","borderStroke","background","glowingGraphEdge","squareColors","startsAt","initial","initialDark","accessible","accessibleDark","inaccessible","posCircle","center","graphLine","grayMain","highlights","shadow","color","shadowsColor","ObstacleDrawer","mainLayer","shadowLayer","square","drawRoundedRect","tint","drawShadow","drawShape","filters","BlurFilter","alpha","blendMode","MULTIPLY","Princess","princessContainer","initPrincessGraphic","head","flag","dog","PixiDrawManager","app","squareGraphics","obstacleGraphics","obstacleEdgeGraphics","shadowGraphics","backgroundLayer","gridLayer","graphLayer","solutionLayer","obstacleLayer","heroContainer","princessLayer","obstacleEdgeLayer","hero","princess","initBackgroundLayer","bg","drawRect","padding","cacheAsBitmap","wall","getWallGraphic","wallStroke","stroke2","wallShadow","DARKEN","lineStyle","lineTo","replaceGraphic","g","grSet","layer","newGraphic","destroy","removeChildren","alreadyDrew","vertex1","vertex2","edgeKey","localeCompare","renderGraphLine","coord","vertex","drawPosCircle","stage","graphic","NoiseFilter","drawObstacleEdge","animatedSquare","removeChild","posKey","ControllerActionsView","props","actions","useRecoilValue","large","onClick","graphActions","atom","default","PixiGridView","ref","useRef","actionsSetter","useSetRecoilState","useEffect","container","current","skipHello","backgroundColor","antialias","resolution","pivot","view","className","styles","join","canvasStyle","Classes","ELEVATION_3","appendChild","controller","textureUrl","BaseTextureCache","TextureCache","headerStyle","style","borderRadius","display","alignItems","justifyContent","solvers","DFS","providers","ctrlProviderState","solverState","obstacleSetState","DemoPage","useRecoilState","controllerProvider","setControllerProvider","setSolver","setObstacles","classes","demoPageStyle","DARK","paramsStyle","vertical","minimal","active","s","o","contentStyle","flex","alignContent","appStyle","DARK_GRAY1","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","registerPlugin","PixiPlugin","registerPIXI","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.564b35a8.chunk.js","sourcesContent":["import { isUndefined } from \"lodash\";\nimport { PixiDrawManager } from \"../Graphics/PixiDrawManager\";\nimport { Graph, GraphSolution } from \"../Solvers/Solvers\";\n\nexport type GraphWithSolution = { graph: Graph; soln: GraphSolution };\n\nexport class GraphSolutionController {\n  constructor(\n    private drawManager: PixiDrawManager,\n    private solution: GraphWithSolution\n  ) {}\n\n  public drawSolution = () => {\n    const { solution } = this;\n    const delay = 60;\n    if (!isUndefined(solution)) {\n      const { graph, soln } = solution;\n      soln.explorationOrder.forEach((edge, index) => {\n        setTimeout(() => {\n          this.drawManager.glowEdge(\n            graph.vertices.get(edge.v1)!,\n            graph.vertices.get(edge.v2)!\n          );\n        }, index * delay);\n      });\n\n      setTimeout(\n        () =>\n          this.drawManager.drawSolution(\n            soln.solution.map((p) => graph.vertices.get(p)!)\n          ),\n        soln.explorationOrder.length * delay\n      );\n    }\n  };\n}\n","import { ObjPos } from \"../Controllers/GridController\";\n\nexport type VertexId = string;\n\nexport type GraphEdge = {\n  v1: VertexId;\n  v2: VertexId;\n};\n\nexport type GraphSolution = {\n  solution: VertexId[];\n  explorationOrder: GraphEdge[];\n};\n\nexport type GraphSolved = \"solved\";\n\nexport class Graph {\n  public adjecent: Map<VertexId, VertexId[]> = new Map();\n  public vertices: Map<VertexId, ObjPos> = new Map();\n}\n\nexport interface GraphSolver {\n  solve: (graph: Graph, start: VertexId, goal: VertexId) => GraphSolution;\n  name: string;\n}\n","import { isUndefined } from \"lodash\";\nimport { SetterOrUpdater } from \"recoil\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { CanvasInfo } from \"./CanvasInfo\";\nimport { ControllerProvider, PathfinderController } from \"./Controller\";\nimport { GraphSolutionController } from \"./GraphSolutionController\";\nimport { ObstaclesController } from \"./ObstaclesController\";\nimport { Graph, GraphSolver, VertexId } from \"../Solvers/Solvers\";\nimport { GridType, PixiDrawManager } from \"../Graphics/PixiDrawManager\";\nimport { DemoAction } from \"../Views/ActionsViewer\";\n\nexport interface ObjPos {\n  x: number;\n  y: number;\n}\nexport interface ObjDimensions {\n  x: number;\n  y: number;\n}\n\nexport interface Obstacle {\n  position: ObjPos;\n  dimensions: ObjDimensions;\n}\n\nexport class GridAlgorithmsController implements PathfinderController {\n  private squareSize: number = 50;\n  private readonly gridWidth = this.canvas.width / this.squareSize;\n  private readonly gridHeight = this.canvas.height / this.squareSize;\n\n  private solutionController?: GraphSolutionController;\n\n  private availablityGrid: Array<Array<string | undefined>> = Array(\n    this.gridWidth\n  )\n    .fill(0)\n    .map(() => Array(this.gridHeight).fill(undefined));\n\n  static provider: ControllerProvider = {\n    get: (a, b, c, d, e) => new GridAlgorithmsController(a, b, c, d, e),\n    name: \"Grid\",\n  };\n\n  constructor(\n    private drawManager: PixiDrawManager,\n    private solver: GraphSolver,\n    private obstaclesController: ObstaclesController,\n    private canvas: CanvasInfo,\n    private setActions: SetterOrUpdater<DemoAction[]>\n  ) {\n    this.obstaclesController.drawObstacles();\n    setActions([{ name: \"Show Grid\", fn: this.initializeGrid }]);\n  }\n\n  public drawSolution = () => {\n    this.solutionController?.drawSolution();\n  };\n\n  public initializeGrid = () => {\n    this.overGrid((i, j) =>\n      this.drawDelayedSquare(i, j, (i + j) % 2 ? \"initial\" : \"initialDark\")\n    );\n    this.setActions([\n      { name: \"Show Accessible Squares\", fn: this.computeAccessibleSquares },\n    ]);\n  };\n\n  private overGrid = <T>(fn: (x: number, y: number) => T) => {\n    for (let i = 0; i < this.gridWidth; i++) {\n      for (let j = 0; j < this.gridHeight; j++) {\n        fn(i, j);\n      }\n    }\n  };\n\n  public computeAccessibleSquares = () => {\n    this.overGrid((i, j) => {\n      const isAccessible = !this.obstaclesController.hitsAnyObstacle({\n        position: { x: i, y: j },\n        dimensions: { x: 1, y: 1 },\n      });\n\n      this.drawDelayedSquare(\n        i,\n        j,\n        isAccessible\n          ? (i + j) % 2\n            ? \"accessible\"\n            : \"accessibleDark\"\n          : \"inaccessible\"\n      );\n\n      this.availablityGrid[i][j] = isAccessible ? uuidv4() : undefined;\n    });\n    this.setActions([{ name: \"Compute Graph\", fn: this.drawGraph }]);\n  };\n\n  public drawGraph = () => {\n    let graph = new Graph();\n    this.overGrid((i, j) => {\n      this.addNeighboursToGraph(i, j, this.availablityGrid, graph);\n    });\n    this.drawManager.drawGraph(graph);\n    this.solutionController = new GraphSolutionController(this.drawManager, {\n      graph,\n      soln: this.solver.solve(\n        graph,\n        this.availablityGrid[0][0]!,\n        this.availablityGrid[this.gridWidth - 1][this.gridHeight - 1]!\n      ),\n    });\n    this.setActions([{ name: \"Compute Solution\", fn: this.drawSolution }]);\n  };\n\n  private addNeighboursToGraph(\n    x: number,\n    y: number,\n    gridGraph: Array<Array<string | undefined>>,\n    graph: Graph\n  ) {\n    const currentId = gridGraph[x][y];\n    if (!isUndefined(currentId)) {\n      graph.vertices.set(currentId, {\n        x: (x + 0.5) * this.squareSize,\n        y: (y + 0.5) * this.squareSize,\n      });\n      const adj: VertexId[] = [];\n      const addIfNotUndefined = (xx: number, yy: number) => {\n        const v = gridGraph[xx][yy];\n        if (!isUndefined(v)) {\n          adj.push(v);\n        }\n      };\n      if (x > 0) {\n        addIfNotUndefined(x - 1, y);\n      }\n      if (y > 0) {\n        addIfNotUndefined(x, y - 1);\n      }\n      if (x < this.gridWidth - 1) {\n        addIfNotUndefined(x + 1, y);\n      }\n      if (y < this.gridHeight - 1) {\n        addIfNotUndefined(x, y + 1);\n      }\n\n      graph.adjecent.set(currentId, adj);\n    }\n  }\n\n  private drawDelayedSquare = (i: number, j: number, type: GridType) => {\n    setTimeout(\n      () =>\n        this.drawManager.DrawSquare({\n          type,\n          position: { x: i * this.squareSize, y: j * this.squareSize },\n          size: this.squareSize,\n        }),\n      Math.sqrt(i * i + j * j) * 20\n    );\n  };\n}\n","import { SetterOrUpdater } from \"recoil\";\nimport { DrawPosition, PixiDrawManager } from \"../Graphics/PixiDrawManager\";\nimport { Graph, GraphSolver } from \"../Solvers/Solvers\";\nimport { DemoAction } from \"../Views/ActionsViewer\";\nimport { CanvasInfo } from \"./CanvasInfo\";\nimport { ControllerProvider, PathfinderController } from \"./Controller\";\nimport { ObstaclesController } from \"./ObstaclesController\";\n\nexport class LessonController implements PathfinderController {\n  static provider: ControllerProvider = {\n    get: (a, b, c, d, e) => new LessonController(a, b, c, d, e),\n    name: \"Lesson\",\n  };\n  private graph = new Graph();\n  private pos1: DrawPosition = { x: 225, y: 75 };\n  private pos2: DrawPosition = { x: 75, y: 475 };\n  private pos3: DrawPosition = { x: 525, y: 125 };\n  private pos4: DrawPosition = { x: 525, y: 475 };\n\n  constructor(\n    private drawManager: PixiDrawManager,\n    private solver: GraphSolver,\n    private obstaclesController: ObstaclesController,\n    private canvas: CanvasInfo,\n    private setActions: SetterOrUpdater<DemoAction[]>\n  ) {\n    this.drawObstacles();\n\n    this.graph.vertices.set(\"h\", this.canvas.heroPosition);\n    this.graph.vertices.set(\"p\", this.canvas.princessPosition);\n    this.graph.vertices.set(\"1\", this.pos1);\n    this.graph.vertices.set(\"2\", this.pos2);\n    this.graph.vertices.set(\"3\", this.pos3);\n    this.graph.vertices.set(\"4\", this.pos4);\n\n    this.graph.adjecent.set(\"h\", [\"1\"]);\n    this.graph.adjecent.set(\"1\", [\"h\", \"2\", \"3\", \"4\"]);\n    this.graph.adjecent.set(\"2\", [\"1\"]);\n    this.graph.adjecent.set(\"3\", [\"1\", \"4\", \"p\"]);\n    this.graph.adjecent.set(\"4\", [\"1\", \"3\", \"p\"]);\n    this.graph.adjecent.set(\"p\", [\"4\", \"3\"]);\n\n    this.moveTo(\"h\");\n    this.drawGraph();\n  }\n\n  private moveTo = (node: string) => {\n    this.drawManager.moveHero(this.graph.vertices.get(node)!);\n\n    this.setActions(\n      this.graph.adjecent\n        .get(node)!\n        .map((n) => ({ name: `Move to ${n}`, fn: () => this.moveTo(n) }))\n    );\n  };\n\n  private drawGraph = () => {\n    this.drawManager.drawGraph(this.graph);\n  };\n\n  private drawObstacles = () => {\n    this.obstaclesController.drawObstacles();\n  };\n}\n","import { DrawPosition } from \"../Graphics/PixiDrawManager\";\n\nexport type CanvasInfo = {\n  height: number;\n  width: number;\n  heroSize: number;\n  heroPosition: DrawPosition;\n  princessPosition: DrawPosition;\n  padding: number;\n};\n\nexport const inCanvasFilter = (canvas: CanvasInfo) => (p: DrawPosition) =>\n  p.x >= 0 && p.x <= canvas.width && p.y >= 0 && p.y <= canvas.height;\n","import {\n  DrawObstacle,\n  DrawPosition,\n  PixiDrawManager,\n} from \"../Graphics/PixiDrawManager\";\nimport { CanvasInfo } from \"./CanvasInfo\";\nimport { ObstaclesController } from \"./ObstaclesController\";\n\nexport class ExpandedObstacles {\n  private expandedObstacles: DrawObstacle[] = [];\n\n  constructor(\n    private drawManager: PixiDrawManager,\n    private obstaclesController: ObstaclesController,\n    private canvas: CanvasInfo\n  ) {\n    this.init();\n  }\n\n  private init = () => {\n    this.obstaclesController.obstacles.forEach((obstacle) => {\n      const drawObs = this.obstaclesController.expandObstacleForDrawing(\n        obstacle\n      );\n      const expandedObstacle: DrawObstacle = {\n        position: {\n          x: drawObs.position.x - this.canvas.heroSize,\n          y: drawObs.position.y - this.canvas.heroSize,\n        },\n        size: {\n          x: drawObs.size.x + 2 * this.canvas.heroSize,\n          y: drawObs.size.y + 2 * this.canvas.heroSize,\n        },\n      };\n      this.expandedObstacles.push(expandedObstacle);\n    });\n  };\n\n  public get all() {\n    return this.expandedObstacles;\n  }\n\n  public draw = () => {\n    this.drawManager.drawObstacleUnavailable(this.expandedObstacles);\n  };\n\n  public hitsAny = (pos: DrawPosition): boolean => {\n    let res = false;\n    this.expandedObstacles.forEach((obs) => {\n      res = res || this.hitsObstacle(pos, obs);\n    });\n    return res;\n  };\n\n  private hitsObstacle = (\n    pos: DrawPosition,\n    obstacle: DrawObstacle\n  ): boolean => {\n    return !(\n      pos.x < obstacle.position.x ||\n      pos.x > obstacle.position.x + obstacle.size.x ||\n      pos.y < obstacle.position.y ||\n      pos.y > obstacle.position.y + obstacle.size.y\n    );\n  };\n}\n","import { DrawObstacle, DrawPosition } from \"../Graphics/PixiDrawManager\";\n\nexport class SegmentIntersectionCalculator {\n  private ge = (a: number, b: number) => {\n    return a - b > -0.000001;\n  };\n  public intresectsLine = (\n    p1: DrawPosition,\n    p2: DrawPosition,\n    obs: DrawObstacle\n  ): boolean => {\n    const { position, size } = obs;\n    // Figure out if projections intersect.\n    let minX = Math.min(p1.x, p2.x);\n    let maxX = Math.max(p1.x, p2.x);\n\n    if (\n      this.ge(obs.position.x, maxX) ||\n      this.ge(minX, obs.position.x + obs.size.x)\n    ) {\n      // Projections do not intersect on X\n      return false;\n    }\n    maxX = Math.min(maxX, position.x + size.x);\n    minX = Math.max(minX, position.x);\n\n    var minY = p1.y;\n    var maxY = p2.y;\n    var dx = p2.x - p1.x;\n\n    if (Math.abs(dx) > 0.0000001) {\n      var slope = (p2.y - p1.y) / dx;\n      var offset = p1.y - slope * p1.x;\n      minY = slope * minX + offset;\n      maxY = slope * maxX + offset;\n    }\n\n    if (minY > maxY) {\n      var tmp = maxY;\n      maxY = minY;\n      minY = tmp;\n    }\n\n    if (\n      this.ge(obs.position.y, maxY) ||\n      this.ge(minY, obs.position.y + obs.size.y)\n    ) {\n      // Projections do not intersect on X\n      return false;\n    }\n\n    console.log(\"Intersection\", p1, p2, obs);\n    return true;\n  };\n}\n","import { SetterOrUpdater } from \"recoil\";\nimport {\n  DrawPosition,\n  PixiDrawManager,\n} from \"../Graphics/PixiDrawManager\";\nimport { Graph, GraphSolver } from \"../Solvers/Solvers\";\nimport { DemoAction } from \"../Views/ActionsViewer\";\nimport { CanvasInfo, inCanvasFilter } from \"./CanvasInfo\";\nimport { ControllerProvider, PathfinderController } from \"./Controller\";\nimport { ExpandedObstacles } from \"./ExpandedObstacles\";\nimport { GraphSolutionController } from \"./GraphSolutionController\";\nimport { ObstaclesController } from \"./ObstaclesController\";\nimport { SegmentIntersectionCalculator } from \"./SegmentRectacleIntersection\";\n\nexport class VisibilityGraphController implements PathfinderController {\n  private readonly intersectionCalc = new SegmentIntersectionCalculator();\n  private expandedObstacles: ExpandedObstacles;\n  static provider: ControllerProvider = {\n    get: (a, b, c, d, e) => new VisibilityGraphController(a, b, c, d, e),\n    name: \"Visibility Graph\",\n  };\n\n  constructor(\n    private drawManager: PixiDrawManager,\n    private solver: GraphSolver,\n    private obstaclesController: ObstaclesController,\n    private canvas: CanvasInfo,\n    private setActions: SetterOrUpdater<DemoAction[]>\n  ) {\n    this.drawObstacles();\n    this.expandedObstacles = new ExpandedObstacles(\n      drawManager,\n      obstaclesController,\n      canvas\n    );\n    setActions([{ name: \"Show Inccessible Area\", fn: this.showInaccessible }]);\n  }\n\n  public showInaccessible = () => {\n    this.expandedObstacles.draw();\n    this.setActions([{ name: \"Draw Graph\", fn: this.computeSolution }]);\n  };\n\n  private drawObstacles = () => {\n    this.obstaclesController.drawObstacles();\n  };\n\n  private computeSolution = () => {\n    const allPoints: DrawPosition[] = this.expandedObstacles.all\n      .flatMap((obs) => {\n        const { position, size } = obs;\n        return [\n          { x: position.x, y: position.y },\n          { x: position.x, y: position.y + size.y },\n          { x: position.x + size.x, y: position.y },\n          { x: position.x + size.x, y: position.y + size.y },\n        ];\n      })\n      .concat([this.canvas.heroPosition, this.canvas.princessPosition])\n      .filter(inCanvasFilter(this.canvas));\n\n    let graph = new Graph();\n    for (let i = 0; i < allPoints.length; i++) {\n      graph.vertices.set(i.toString(), allPoints[i]);\n      graph.adjecent.set(i.toString(), []);\n    }\n\n    for (let i = 0; i < allPoints.length; ++i) {\n      for (let j = 0; j < allPoints.length; ++j) {\n        if (this.isViableLine(allPoints[i], allPoints[j])) {\n          graph.adjecent.get(i.toString())?.push(j.toString());\n          graph.adjecent.get(j.toString())?.push(i.toString());\n        }\n      }\n    }\n\n    this.drawManager.drawGraph(graph);\n\n    let solutionController = new GraphSolutionController(this.drawManager, {\n      graph,\n      soln: this.solver.solve(\n        graph,\n        (allPoints.length - 2).toString(),\n        (allPoints.length - 1).toString()\n      ),\n    });\n    this.setActions([\n      { name: \"Compute Solution\", fn: solutionController.drawSolution },\n    ]);\n  };\n\n  private isViableLine = (p1: DrawPosition, p2: DrawPosition): boolean => {\n    let result = true;\n    this.expandedObstacles.all.forEach((obstacle) => {\n      result =\n        result && !this.intersectionCalc.intresectsLine(p1, p2, obstacle);\n    });\n    return result;\n  };\n}\n","import { isUndefined } from \"lodash\";\nimport { SetterOrUpdater } from \"recoil\";\nimport voronoi from \"voronoi-diagram\";\nimport {\n  DrawPosition,\n  DrawSize,\n  PixiDrawManager,\n} from \"../Graphics/PixiDrawManager\";\nimport { Graph, GraphSolver } from \"../Solvers/Solvers\";\nimport { DemoAction } from \"../Views/ActionsViewer\";\nimport { CanvasInfo, inCanvasFilter } from \"./CanvasInfo\";\nimport { ControllerProvider, PathfinderController } from \"./Controller\";\nimport { ExpandedObstacles } from \"./ExpandedObstacles\";\nimport { GraphSolutionController } from \"./GraphSolutionController\";\nimport { ObstaclesController } from \"./ObstaclesController\";\n\nexport class VoronoiController implements PathfinderController {\n  private solutionController?: GraphSolutionController;\n  private expandedObstacles: ExpandedObstacles;\n\n  static provider: ControllerProvider = {\n    get: (a, b, c, d, e) => new VoronoiController(a, b, c, d, e),\n    name: \"Voronoi Diagram\",\n  };\n\n  constructor(\n    private drawManager: PixiDrawManager,\n    private solver: GraphSolver,\n    private obstaclesController: ObstaclesController,\n    private readonly canvas: CanvasInfo,\n    private setActions: SetterOrUpdater<DemoAction[]>\n  ) {\n    this.obstaclesController.drawObstacles();\n    this.expandedObstacles = new ExpandedObstacles(\n      drawManager,\n      obstaclesController,\n      canvas\n    );\n    setActions([\n      { name: \"Show Expanded Obstacles\", fn: this.showExpandedObstacles },\n    ]);\n  }\n\n  public showExpandedObstacles = () => {\n    this.expandedObstacles.draw();\n\n    this.setActions([{ name: \"Show Graph\", fn: this.drawGraph }]);\n  };\n\n  public drawSolution = () => {\n    this.solutionController?.drawSolution();\n  };\n\n  public drawGraph = () => {\n    let graph = new Graph();\n\n    const expandBox = (pos: DrawPosition, size: DrawSize): voronoi.Point[] => {\n      let res: voronoi.Point[] = [];\n      const density = 20;\n\n      for (let i = 1; i <= density - 1; i++) {\n        res.push([pos.x + (size.x / density) * i, pos.y]);\n        res.push([pos.x + (size.x / density) * i, pos.y + size.y]);\n\n        res.push([pos.x, pos.y + (size.y / density) * i]);\n        res.push([pos.x + size.x, pos.y + (size.y / density) * i]);\n      }\n      return res;\n    };\n\n    const points: voronoi.Point[] = this.expandedObstacles.all.flatMap(\n      (obs): voronoi.Point[] => {\n        const { position, size } = obs;\n        return expandBox(position, size);\n      }\n    );\n\n    points.push(...expandBox({ x: 0, y: 0 }, { x: 900, y: 600 }));\n    points.push(...this.expandPoint(this.canvas.heroPosition));\n    points.push(...this.expandPoint(this.canvas.princessPosition));\n\n    const gr = voronoi(points);\n\n    const isInCavas = inCanvasFilter(this.canvas);\n\n    gr.positions.forEach((pos, index) => {\n      const drawPos: DrawPosition = { x: pos[0], y: pos[1] };\n      if (!this.expandedObstacles.hitsAny(drawPos) && isInCavas(drawPos)) {\n        graph.vertices.set(index.toString(), { x: pos[0], y: pos[1] });\n        graph.adjecent.set(index.toString(), []);\n      }\n    });\n\n    gr.cells.forEach((cell) => {\n      for (let i = 0; i < cell.length; i++) {\n        const nextPos = cell[(i + 1) % cell.length];\n        const pos = cell[i];\n        if (\n          pos !== -1 &&\n          nextPos !== -1 &&\n          !isUndefined(graph.vertices.get(pos.toString())) &&\n          !isUndefined(graph.vertices.get(nextPos.toString()))\n        ) {\n          graph.adjecent.get(pos.toString())?.push(nextPos.toString());\n\n          graph.adjecent.get(nextPos.toString())?.push(pos.toString());\n        }\n      }\n    });\n    this.drawManager.drawGraph(graph);\n\n    this.solutionController = new GraphSolutionController(this.drawManager, {\n      graph,\n      soln: this.solver.solve(\n        graph,\n        this.findIndex(this.canvas.heroPosition, gr.positions).toString(),\n        this.findIndex(this.canvas.princessPosition, gr.positions).toString()\n      ),\n    });\n\n    this.setActions([{ name: \"Draw Solution\", fn: this.drawSolution }]);\n  };\n\n  private findIndex = (pos: DrawPosition, points: voronoi.Point[]): number => {\n    let best = -1;\n    let bestDist = 10000000000;\n\n    points.forEach((point, index) => {\n      const dist = this.sqDist(pos, { x: point[0], y: point[1] });\n      if (dist < bestDist) {\n        best = index;\n        bestDist = dist;\n      }\n    });\n    return best;\n  };\n\n  private sqDist = (p1: DrawPosition, p2: DrawPosition) => {\n    const xdist = p1.x - p2.x;\n    const ydist = p1.y - p2.y;\n    return xdist * xdist + ydist * ydist;\n  };\n\n  private expandPoint = (pos: DrawPosition): voronoi.Point[] => {\n    const { x, y } = pos;\n    return [\n      [x - 0.1, y - 0.1],\n      [x - 0.1, y + 0.1],\n      [x + 0.1, y - 0.1],\n      [x + 0.1, y + 0.1],\n    ];\n  };\n}\n","import { Obstacle } from \"../Controllers/GridController\";\n\nexport type ObstacleSet = {\n  name: string;\n  obstacles: Obstacle[];\n};\n\nexport const obstacles: ObstacleSet[] = [\n  { name: \"Empty\", obstacles: [] },\n  {\n    name: \"Maze\",\n    obstacles: [\n      {\n        position: {\n          x: -1,\n          y: 1.5,\n        },\n        dimensions: {\n          x: 10,\n          y: 1,\n        },\n      },\n\n      {\n        position: {\n          x: 10.5,\n          y: -1,\n        },\n        dimensions: {\n          x: 0.5,\n          y: 12,\n        },\n      },\n      {\n        position: {\n          x: 1.3,\n          y: 4,\n        },\n        dimensions: {\n          x: 1.2,\n          y: 5,\n        },\n      },\n      {\n        position: {\n          x: 4.2,\n          y: 6.3,\n        },\n        dimensions: {\n          x: 1.2,\n          y: 7,\n        },\n      },\n\n      {\n        position: {\n          x: 2,\n          y: 4,\n        },\n        dimensions: {\n          x: 10,\n          y: 1,\n        },\n      },\n      {\n        position: {\n          x: 5,\n          y: 7,\n        },\n        dimensions: {\n          x: 3.8,\n          y: 0.3,\n        },\n      },\n      {\n        position: {\n          x: 8,\n          y: 9.2,\n        },\n        dimensions: {\n          x: 4,\n          y: 1.2,\n        },\n      },\n      {\n        position: {\n          x: 15,\n          y: 2,\n        },\n        dimensions: {\n          x: 1,\n          y: 12,\n        },\n      },\n    ],\n  },\n  {\n    name: \"Bottom Hills\",\n    obstacles: [\n      {\n        position: {\n          x: 2.2,\n          y: 4.3,\n        },\n        dimensions: {\n          x: 0.7,\n          y: 10,\n        },\n      },\n      {\n        position: {\n          x: 6.3,\n          y: 6.3,\n        },\n        dimensions: {\n          x: 0.4,\n          y: 6,\n        },\n      },\n      {\n        position: {\n          x: 9,\n          y: 3,\n        },\n        dimensions: {\n          x: 1,\n          y: 12,\n        },\n      },\n      {\n        position: {\n          x: 12,\n          y: 7,\n        },\n        dimensions: {\n          x: 2,\n          y: 12,\n        },\n      },\n    ],\n  },\n\n  {\n    name: \"Simple\",\n    obstacles: [\n      {\n        position: {\n          x: 3.1,\n          y: 4.7,\n        },\n        dimensions: {\n          x: 2.8,\n          y: 6,\n        },\n      },\n      {\n        position: {\n          x: 7.45,\n          y: 4.2,\n        },\n        dimensions: {\n          x: 2.5,\n          y: 1.23,\n        },\n      },\n      {\n        position: {\n          x: 12.3,\n          y: 0.1,\n        },\n        dimensions: {\n          x: 1,\n          y: 8,\n        },\n      },\n    ],\n  },\n];\n","import { shuffle } from \"lodash\";\nimport {\n  Graph,\n  GraphEdge,\n  GraphSolution,\n  GraphSolver,\n  VertexId,\n} from \"./Solvers\";\n\nexport enum GraphSolverMode {\n  DFS = \"DFS\",\n  BFS = \"BFS\",\n}\n\nexport class SimpleGraphSolver implements GraphSolver {\n  constructor(private randomizeOrder: boolean, private mode: GraphSolverMode) {}\n  public solve = (\n    graph: Graph,\n    start: VertexId,\n    goal: VertexId\n  ): GraphSolution => {\n    let explorationOrder: GraphEdge[] = [];\n\n    const visitedNodes: Set<VertexId> = new Set();\n    const solution: Array<VertexId> = [];\n    let nodesToProcess: Array<{ path: VertexId[] }> = [{ path: [start] }];\n\n    while (nodesToProcess.length > 0) {\n      let { path } =\n        this.mode === GraphSolverMode.BFS\n          ? nodesToProcess.shift()!\n          : nodesToProcess.pop()!;\n      let currentNode = path[path.length - 1];\n\n      if (currentNode === goal) {\n        return { solution: path, explorationOrder };\n      }\n\n      if (!visitedNodes.has(currentNode)) {\n        if (path.length > 1) {\n          explorationOrder.push({ v1: path[path.length - 2], v2: currentNode });\n        }\n        visitedNodes.add(currentNode);\n        solution.push(currentNode);\n\n        const adjecentNodes = graph.adjecent.get(currentNode)!;\n        const orderedAdjecentNodes = this.randomizeOrder\n          ? shuffle(adjecentNodes)\n          : adjecentNodes;\n\n        orderedAdjecentNodes.forEach((id) => {\n          nodesToProcess.push({ path: path.concat([id]) });\n        });\n      }\n    }\n\n    return { solution: [], explorationOrder };\n  };\n\n  public get name() {\n    return `Classic ${this.mode.toString()} ${\n      this.randomizeOrder ? \"Rand\" : \"\"\n    }`;\n  }\n}\n","import * as Collections from \"typescript-collections\";\nimport { ObjPos } from \"../Controllers/GridController\";\n\nimport {\n  Graph,\n  GraphEdge,\n  GraphSolution,\n  GraphSolver,\n  VertexId,\n} from \"./Solvers\";\n\nexport class AStarSolver implements GraphSolver {\n  public solve = (\n    graph: Graph,\n    start: VertexId,\n    goal: VertexId\n  ): GraphSolution => {\n    let explorationOrder: GraphEdge[] = [];\n\n    const distance = (p1: ObjPos, p2: ObjPos) => {\n      const xdist = p1.x - p2.x;\n      const ydist = p1.y - p2.y;\n\n      return xdist * xdist + ydist * ydist;\n    };\n    const goalPoint = graph.vertices.get(goal)!;\n\n    const visitedNodes: Set<VertexId> = new Set();\n    const solution: Array<VertexId> = [];\n    let nodesToProcess = new Collections.PriorityQueue<{ path: VertexId[] }>(\n      (p1, p2) => {\n        const n1 = p1.path[p1.path.length - 1];\n        const n2 = p2.path[p2.path.length - 1];\n\n        const c1 = graph.vertices.get(n1)!;\n        const c2 = graph.vertices.get(n2)!;\n\n        return distance(c2, goalPoint) - distance(c1, goalPoint);\n      }\n    );\n    nodesToProcess.enqueue({ path: [start] });\n\n    while (!nodesToProcess.isEmpty()) {\n      let { path } = nodesToProcess.dequeue()!;\n      let currentNode = path[path.length - 1];\n\n      if (currentNode === goal) {\n        return { solution: path, explorationOrder };\n      }\n\n      if (!visitedNodes.has(currentNode)) {\n        if (path.length > 1) {\n          explorationOrder.push({ v1: path[path.length - 2], v2: currentNode });\n        }\n        visitedNodes.add(currentNode);\n        solution.push(currentNode);\n\n        graph.adjecent.get(currentNode)!.forEach((id) => {\n          nodesToProcess.enqueue({ path: path.concat([id]) });\n        });\n      }\n    }\n\n    console.log(\"Could not find solution\", visitedNodes);\n    return { solution: [], explorationOrder };\n  };\n\n  public get name() {\n    return \"A-Star Solver\";\n  }\n}\n","import { DrawObstacle, PixiDrawManager } from \"../Graphics/PixiDrawManager\";\nimport { Obstacle } from \"./GridController\";\nimport { ObstacleSet } from \"../Obstacles/ObstacleSets\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nexport class ObstaclesController {\n  private _obstacles: Map<string, Obstacle> = new Map();\n  private squareSize: number = 50;\n\n  constructor(private drawManager: PixiDrawManager, set: ObstacleSet) {\n    this.initializeObstacles(set.obstacles);\n  }\n\n  public get obstacles() {\n    return this._obstacles;\n  }\n\n  public drawObstacles = () => {\n    this._obstacles.forEach((obstacle, key) => {\n      this.drawManager.drawObstacle(\n        key,\n        this.expandObstacleForDrawing(obstacle)\n      );\n    });\n  };\n\n  public expandObstacleForDrawing = (obstacle: Obstacle): DrawObstacle => {\n    return {\n      position: {\n        x: obstacle.position.x * this.squareSize,\n        y: obstacle.position.y * this.squareSize,\n      },\n      size: {\n        x: obstacle.dimensions.x * this.squareSize,\n        y: obstacle.dimensions.y * this.squareSize,\n      },\n    };\n  };\n\n  public hitsAnyObstacle = (sq: Obstacle): boolean => {\n    let result = false;\n    this.obstacles.forEach((obstacle) => {\n      result = result || this.obstaclesIntersect(sq, obstacle);\n    });\n    return result;\n  };\n\n  public obstaclesIntersect = (o1: Obstacle, o2: Obstacle): boolean => {\n    const l1 = o1.position;\n    const r1 = {\n      x: o1.position.x + o1.dimensions.x,\n      y: o1.position.y + o1.dimensions.y,\n    };\n\n    const l2 = o2.position;\n    const r2 = {\n      x: o2.position.x + o2.dimensions.x,\n      y: o2.position.y + o2.dimensions.y,\n    };\n\n    console.log(\"BB\", l1, r1, l2, r2);\n\n    // If one rectangle is on left side of other\n    if (l1.x >= r2.x || l2.x >= r1.x) {\n      console.log(\"X1\");\n      return false;\n    }\n\n    // If one rectangle is above other\n    if (l1.y >= r2.y || l2.y >= r1.y) {\n      console.log(\"X2\");\n      return false;\n    }\n    return true;\n  };\n\n  private initializeObstacles = (obstacleSet: Obstacle[]) => {\n    this.obstacles.clear();\n    obstacleSet.forEach((obstacle) => {\n      this.obstacles.set(uuidv4(), obstacle);\n    });\n  };\n}\n","export const NumberColors = {\n    BLACK: 0x10161A,\n\n    BLUE1: 0x0E5A8A,\n    BLUE2: 0x106BA3,\n    BLUE3: 0x137CBD,\n    BLUE4: 0x2B95D6,\n    BLUE5: 0x48AFF0,\n\n    COBALT1: 0x1F4B99,\n    COBALT2: 0x2458B3,\n    COBALT3: 0x2965CC,\n    COBALT4: 0x4580E6,\n    COBALT5: 0x669EFF,\n\n    DARK_GRAY1: 0x182026,\n    DARK_GRAY2: 0x202B33,\n    DARK_GRAY3: 0x293742,\n    DARK_GRAY4: 0x30404D,\n    DARK_GRAY5: 0x394B59,\n\n    FOREST1: 0x1D7324,\n    FOREST2: 0x238C2C,\n    FOREST3: 0x29A634,\n    FOREST4: 0x43BF4D,\n    FOREST5: 0x62D96B,\n\n    GOLD1: 0xA67908,\n    GOLD2: 0xBF8C0A,\n    GOLD3: 0xD99E0B,\n    GOLD4: 0xF2B824,\n    GOLD5: 0xFFC940,\n\n    GRAY1: 0x5C7080,\n    GRAY2: 0x738694,\n    GRAY3: 0x8A9BA8,\n    GRAY4: 0xA7B6C2,\n    GRAY5: 0xBFCCD6,\n\n    GREEN1: 0x0A6640,\n    GREEN2: 0x0D8050,\n    GREEN3: 0x0F9960,\n    GREEN4: 0x15B371,\n    GREEN5: 0x3DCC91,\n\n    INDIGO1: 0x5642A6,\n    INDIGO2: 0x634DBF,\n    INDIGO3: 0x7157D9,\n    INDIGO4: 0x9179F2,\n    INDIGO5: 0xAD99FF,\n\n    LIGHT_GRAY1: 0xCED9E0,\n    LIGHT_GRAY2: 0xD8E1E8,\n    LIGHT_GRAY3: 0xE1E8ED,\n    LIGHT_GRAY4: 0xEBF1F5,\n    LIGHT_GRAY5: 0xF5F8FA,\n\n    LIME1: 0x728C23,\n    LIME2: 0x87A629,\n    LIME3: 0x9BBF30,\n    LIME4: 0xB6D94C,\n    LIME5: 0xD1F26D,\n\n    ORANGE1: 0xA66321,\n    ORANGE2: 0xBF7326,\n    ORANGE3: 0xD9822B,\n    ORANGE4: 0xF29D49,\n    ORANGE5: 0xFFB366,\n\n    RED1: 0xA82A2A,\n    RED2: 0xC23030,\n    RED3: 0xDB3737,\n    RED4: 0xF55656,\n    RED5: 0xFF7373,\n\n    ROSE1: 0xA82255,\n    ROSE2: 0xC22762,\n    ROSE3: 0xDB2C6F,\n    ROSE4: 0xF5498B,\n    ROSE5: 0xFF66A1,\n\n    SEPIA1: 0x63411E,\n    SEPIA2: 0x7D5125,\n    SEPIA3: 0x96622D,\n    SEPIA4: 0xB07B46,\n    SEPIA5: 0xC99765,\n\n    TURQUOISE1: 0x008075,\n    TURQUOISE2: 0x00998C,\n    TURQUOISE3: 0x00B3A4,\n    TURQUOISE4: 0x14CCBD,\n    TURQUOISE5: 0x2EE6D6,\n\n    VERMILION1: 0x9E2B0E,\n    VERMILION2: 0xB83211,\n    VERMILION3: 0xD13913,\n    VERMILION4: 0xEB532D,\n    VERMILION5: 0xFF6E4A,\n\n    VIOLET1: 0x5C255C,\n    VIOLET2: 0x752F75,\n    VIOLET3: 0x8F398F,\n    VIOLET4: 0xA854A8,\n    VIOLET5: 0xC274C2,\n\n    WHITE: 0xFFFFFF,\n};","import * as PIXI from \"pixi.js\";\nimport gsap, { Power4 } from \"gsap\";\nimport { NumberColors } from \"../NumberColors\";\n\nexport class Hero {\n  private heroGroup = new PIXI.Container();\n  constructor() {\n    this.initHeroGraphic();\n  }\n\n  private initHeroGraphic = () => {\n    const heroBody = PIXI.Sprite.from(\"heroHead.png\");\n    const heroHands = PIXI.Sprite.from(\"heroHands.png\");\n\n    const duration = 0.5;\n    heroHands.position.y = 2;\n    gsap.to(heroHands, {\n      pixi: {\n        positionY: -3,\n      },\n      duration,\n      repeat: -1,\n      yoyo: true,\n    });\n\n    const eyes = new PIXI.Graphics();\n    eyes.beginFill(NumberColors.BLACK).drawCircle(55, 60, 7);\n    eyes.beginFill(NumberColors.BLACK).drawCircle(99, 60, 5);\n\n    const durationEyes = 2;\n    gsap.to(eyes, {\n      pixi: {\n        positionX: -10,\n      },\n      duration: durationEyes,\n      repeat: -1,\n      yoyo: true,\n      ease: Power4.easeInOut,\n    });\n\n    this.heroGroup.addChild(heroBody);\n    this.heroGroup.addChild(heroHands);\n    this.heroGroup.addChild(eyes);\n    this.heroGroup.scale.set(0.58, 0.58);\n    this.heroGroup.position.x = -43;\n    this.heroGroup.position.y = -43;\n  };\n\n  public get graphic() {\n    return this.heroGroup;\n  }\n}\n","import { NumberColors as Colors } from \"../NumberColors\";\n\nexport const DemoColors = {\n    border: Colors.GRAY2,\n    borderShadow:Colors.DARK_GRAY3,\n    borderStroke:Colors.DARK_GRAY3,\n    background: Colors.LIGHT_GRAY3,\n\n    glowingGraphEdge: Colors.TURQUOISE3,\n    solution: Colors.TURQUOISE2,\n\n    squareColors: {\n        startsAt: Colors.GRAY1,\n        initial: Colors.DARK_GRAY1,\n        initialDark: Colors.DARK_GRAY4,\n        accessible: Colors.GREEN1,\n        accessibleDark: Colors.GREEN3,\n        inaccessible: Colors.GRAY4\n    },\n\n    posCircle: {\n        center: Colors.SEPIA2,\n        fill: Colors.SEPIA4\n    },\n    graphLine: Colors.SEPIA5,\n\n    obstacle: {\n        grayMain: Colors.LIGHT_GRAY2,\n        highlights: Colors.GRAY2,\n        shadow: Colors.DARK_GRAY3,\n        color: Colors.GRAY3,\n    },\n\n    shadowsColor: Colors.DARK_GRAY3\n}","import * as PIXI from \"pixi.js\";\nimport { DrawObstacle } from \"./PixiDrawManager\";\nimport gsap from \"gsap\";\nimport { DemoColors } from \"./DemoColors\";\n\nexport class ObstacleDrawer {\n  public mainLayer = new PIXI.Container();\n  public shadowLayer = new PIXI.Container();\n\n  public static drawObstacle(obstacle: DrawObstacle) {\n    const { position, size } = obstacle;\n    const square = new PIXI.Graphics();\n    square\n      .beginFill(DemoColors.obstacle.highlights)\n      .drawRoundedRect(2, 2, size.x - 4, size.y - 10, 10)\n\n      .beginFill(DemoColors.obstacle.grayMain)\n      .drawRoundedRect(2, 2, size.x - 4, size.y - 9, 10);\n\n    const duration = 2.0;\n    gsap.to(square, {\n      pixi: {\n        tint: DemoColors.obstacle.color,\n      },\n      duration,\n      repeat: 0,\n    });\n\n    square.x = position.x;\n    square.y = position.y;\n    return square;\n  }\n\n  public static drawObstacleEdge(obstacle: DrawObstacle) {\n    const { position, size } = obstacle;\n    const square = new PIXI.Graphics();\n    square\n      .beginFill(DemoColors.obstacle.shadow)\n      .drawRoundedRect(0, 0, size.x, size.y, 10);\n\n    square.x = position.x;\n    square.y = position.y;\n    return square;\n  }\n\n  public static drawShadow = (obstacle: DrawObstacle) => {\n    const { position, size } = obstacle;\n    const square = new PIXI.Graphics();\n    square\n      .beginFill(DemoColors.shadowsColor)\n      .drawShape(\n        new PIXI.RoundedRectangle(\n          position.x - 5,\n          position.y + 5,\n          size.x,\n          size.y,\n          10\n        )\n      );\n    square.filters = [new PIXI.filters.BlurFilter(4, 1)];\n    square.alpha = 0.3;\n    square.blendMode = PIXI.BLEND_MODES.MULTIPLY;\n\n    return square;\n  };\n}\n","import * as PIXI from \"pixi.js\";\nimport gsap, { Power4 } from \"gsap\";\nimport { NumberColors } from \"../NumberColors\";\n\nexport class Princess {\n  private princessContainer = new PIXI.Container();\n  constructor() {\n    this.initPrincessGraphic();\n  }\n\n  private initPrincessGraphic = () => {\n    const head = PIXI.Sprite.from(\"princessHead.png\");\n    const flag = PIXI.Sprite.from(\"princessFlag.png\");\n    const dog = PIXI.Sprite.from(\"princessDog.png\");\n\n    const duration = 3;\n    flag.position.y = 2;\n    gsap.to(flag, {\n      pixi: {\n        positionY: -3,\n      },\n      duration,\n      repeat: -1,\n      yoyo: true,\n    });\n\n    const eyes = new PIXI.Graphics();\n    eyes.beginFill(NumberColors.BLACK).drawCircle(27, 102, 2);\n    eyes.beginFill(NumberColors.BLACK).drawCircle(36, 102, 2);\n\n    const durationEyes = 2;\n    gsap.to(eyes, {\n      pixi: {\n        positionX: -5,\n        positionY: -3\n      },\n      duration: durationEyes,\n      repeat: -1,\n      yoyo: true,\n      ease: Power4.easeInOut,\n    });\n\n    this.princessContainer.addChild(head);\n    this.princessContainer.addChild(flag);\n    this.princessContainer.addChild(dog);\n    this.princessContainer.addChild(eyes);\n    this.princessContainer.scale.set(0.58, 0.58);\n    this.princessContainer.position.x = -43;\n    this.princessContainer.position.y = -43;\n  };\n\n  public get graphic() {\n    return this.princessContainer;\n  }\n}","import gsap from \"gsap\";\nimport * as PIXI from \"pixi.js\";\nimport { Hero } from \"./Hero\";\nimport { ObstacleDrawer } from \"./Obstacle\";\nimport { Princess } from \"./Princess\";\nimport { Graph } from \"../Solvers/Solvers\";\nimport { CanvasInfo } from \"../Controllers/CanvasInfo\";\nimport { DemoColors } from \"./DemoColors\";\n\nexport type GridType =\n  | \"initial\"\n  | \"initialDark\"\n  | \"accessible\"\n  | \"accessibleDark\"\n  | \"inaccessible\";\n\nexport class PixiDrawManager {\n  private squareGraphics: Map<string, PIXI.Graphics> = new Map();\n  private obstacleGraphics: Map<string, PIXI.Graphics> = new Map();\n  private obstacleEdgeGraphics: Map<string, PIXI.Graphics> = new Map();\n  private shadowGraphics: Map<string, PIXI.Graphics> = new Map();\n\n  private backgroundLayer = new PIXI.Container();\n  private gridLayer = new PIXI.Container();\n  private graphLayer = new PIXI.Container();\n  private solutionLayer = new PIXI.Container();\n  private shadowLayer = new PIXI.Container();\n\n  private obstacleLayer = new PIXI.Container();\n\n  private heroContainer = new PIXI.Container();\n  private princessLayer = new PIXI.Container();\n\n  private obstacleEdgeLayer = new PIXI.Container();\n  private hero = new Hero();\n  private princess = new Princess();\n\n  constructor(app: PIXI.Application, readonly canvas: CanvasInfo) {\n    app.stage.addChild(this.backgroundLayer);\n\n    app.stage.addChild(this.gridLayer);\n    app.stage.addChild(this.graphLayer);\n    app.stage.addChild(this.solutionLayer);\n\n    app.stage.addChild(this.shadowLayer);\n\n    app.stage.addChild(this.obstacleEdgeLayer);\n    app.stage.addChild(this.obstacleLayer);\n\n    app.stage.addChild(this.heroContainer);\n    app.stage.addChild(this.princessLayer);\n\n    this.heroContainer.addChild(this.hero.graphic);\n    this.princessLayer.addChild(this.princess.graphic);\n\n    this.heroContainer.x = canvas.heroPosition.x;\n    this.heroContainer.y = canvas.heroPosition.y;\n\n    this.princessLayer.x = canvas.princessPosition.x;\n    this.princessLayer.y = canvas.princessPosition.y;\n\n    this.obstacleLayer.filters = [new PIXI.filters.NoiseFilter(0.09)];\n    this.obstacleEdgeLayer.filters = [new PIXI.filters.NoiseFilter(0.09)];\n    this.backgroundLayer.filters = [new PIXI.filters.NoiseFilter(0.03, 3)];\n\n    this.initBackgroundLayer();\n  }\n\n  public moveHero = (pos: DrawPosition) => {\n    gsap.to(this.heroContainer, {\n      pixi: {\n        ...pos,\n      },\n      duration: 1,\n      repeat: 0,\n    });\n  };\n\n  private initBackgroundLayer = () => {\n    const bg = new PIXI.Graphics();\n\n    bg.beginFill(DemoColors.background).drawRect(\n      -this.canvas.padding,\n      -this.canvas.padding,\n      this.canvas.width + 2 * this.canvas.padding,\n      this.canvas.height + 2 * this.canvas.padding\n    );\n    this.backgroundLayer.addChild(bg);\n    this.backgroundLayer.cacheAsBitmap = true;\n\n    const wall = this.getWallGraphic(DemoColors.obstacle.grayMain);\n    wall.tint = DemoColors.obstacle.color;\n    this.obstacleLayer.addChild(wall);\n\n    const wallStroke = this.getWallGraphic(DemoColors.borderShadow);\n    wallStroke.x = -2;\n    wallStroke.y = -2;\n\n    const stroke2 = this.getWallGraphic(DemoColors.borderShadow);\n    stroke2.x = 2;\n    stroke2.y = 2;\n\n    const wallShadow = this.getWallGraphic(DemoColors.borderShadow);\n    wallShadow.filters = [new PIXI.filters.BlurFilter(3, 1)];\n    wallShadow.moveTo(-5, -5);\n    wallShadow.blendMode = PIXI.BLEND_MODES.DARKEN;\n\n    this.shadowLayer.addChild(wallShadow);\n\n    this.obstacleEdgeLayer.addChild(wallStroke);\n    this.obstacleEdgeLayer.addChild(stroke2);\n  };\n\n  getWallGraphic = (color: number) => {\n    const wall = new PIXI.Graphics();\n    wall\n      .lineStyle({\n        width: this.canvas.padding - 2,\n        color,\n      })\n      .moveTo(-this.canvas.padding / 2, -this.canvas.padding / 2)\n      .lineTo(\n        -this.canvas.padding / 2,\n        this.canvas.height + this.canvas.padding / 2\n      )\n      .lineTo(\n        this.canvas.width + this.canvas.padding / 2,\n        this.canvas.height + this.canvas.padding / 2\n      )\n      .lineTo(\n        this.canvas.width + this.canvas.padding / 2,\n        -this.canvas.padding / 2\n      )\n      .lineTo(-this.canvas.padding, -this.canvas.padding / 2);\n\n    return wall;\n  };\n\n  public drawObstacle(id: string, obstacle: DrawObstacle) {\n    const square = ObstacleDrawer.drawObstacle(obstacle);\n    this.replaceGraphic(id, this.obstacleGraphics, this.obstacleLayer, square);\n\n    const edge = ObstacleDrawer.drawObstacleEdge(obstacle);\n    this.replaceGraphic(\n      id,\n      this.obstacleEdgeGraphics,\n      this.obstacleEdgeLayer,\n      edge\n    );\n    this.drawShadow(id, obstacle);\n  }\n\n  private drawShadow = (id: string, obstacle: DrawObstacle) => {\n    const square = ObstacleDrawer.drawShadow(obstacle);\n    this.replaceGraphic(id, this.shadowGraphics, this.shadowLayer, square);\n  };\n\n  public glowEdge = (p1: DrawPosition, p2: DrawPosition) => {\n    const g = new PIXI.Graphics();\n    g.lineStyle(6, DemoColors.glowingGraphEdge);\n    g.moveTo(p1.x, p1.y);\n    g.lineTo(p2.x, p2.y);\n    g.filters = [new PIXI.filters.BlurFilter(2)];\n\n    this.solutionLayer.addChild(g);\n  };\n\n  public drawSolution(points: DrawPosition[]) {\n    this.solutionLayer.removeChildren();\n    let g = new PIXI.Graphics();\n    g.lineStyle(10, DemoColors.solution);\n    g.moveTo(points[0].x, points[0].y);\n    for (let i = 1; i < points.length; ++i) {\n      g.lineTo(points[i].x, points[i].y);\n    }\n    g.alpha = 0;\n    gsap.to(g, {\n      pixi: {\n        alpha: 1,\n      },\n      duration: 2,\n      repeat: 0,\n    });\n    this.solutionLayer.addChild(g);\n  }\n\n  private replaceGraphic = (\n    id: string,\n    grSet: Map<string, PIXI.Graphics>,\n    layer: PIXI.Container,\n    newGraphic: PIXI.Graphics\n  ) => {\n    grSet.get(id)?.destroy();\n    grSet.set(id, newGraphic);\n\n    layer.addChild(newGraphic);\n  };\n\n  public drawGraph = (graph: Graph) => {\n    this.graphLayer.removeChildren();\n\n    const alreadyDrew = new Set<string>();\n    const computeEdgeKey = (v1: string, v2: string): string => {\n      if (v1.localeCompare(v2) > 0) {\n        return v1 + v2;\n      } else {\n        return v2 + v1;\n      }\n    };\n    graph.adjecent.forEach((adj, vertex1) => {\n      adj.forEach((vertex2) => {\n        const edgeKey = computeEdgeKey(vertex1, vertex2);\n        if (!alreadyDrew.has(edgeKey)) {\n          alreadyDrew.add(edgeKey);\n\n          this.renderGraphLine(\n            graph.vertices.get(vertex1)!,\n            graph.vertices.get(vertex2)!\n          );\n        }\n      });\n    });\n    graph.vertices.forEach((coord, vertex) => {\n      this.drawPosCircle(graph.vertices.get(vertex)!);\n    });\n  };\n\n  private drawPosCircle(pos: DrawPosition) {\n    const g = new PIXI.Graphics();\n    g.beginFill(DemoColors.posCircle.fill);\n    g.drawCircle(pos.x, pos.y, 7);\n    g.beginFill(DemoColors.posCircle.center);\n    g.drawCircle(pos.x, pos.y, 3);\n\n    this.graphLayer.addChild(g);\n  }\n\n  private renderGraphLine(p1: DrawPosition, p2: DrawPosition) {\n    const g = new PIXI.Graphics();\n    g.lineStyle(3, DemoColors.graphLine, 0.6);\n    g.moveTo(p1.x, p1.y);\n    g.lineTo(p2.x, p2.y);\n\n    this.graphLayer.addChild(g);\n  }\n  public drawObstacleUnavailable = (expandedObstacles: DrawObstacle[]) => {\n    this.gridLayer.removeChildren();\n\n    expandedObstacles.forEach((obs) => {\n      const square = new PIXI.Graphics()\n        .beginFill(0xffffff)\n        .drawShape(\n          new PIXI.RoundedRectangle(\n            obs.position.x,\n            obs.position.y,\n            obs.size.x,\n            obs.size.y,\n            10\n          )\n        );\n      const duration = 1.0;\n      gsap.to(square, {\n        pixi: {\n          tint: DemoColors.squareColors.inaccessible,\n        },\n        duration,\n        repeat: 0,\n      });\n      this.gridLayer.addChild(square);\n    });\n  };\n\n  public DrawSquare(animatedSquare: AnimatedGridSquare) {\n    const { type, position, size } = animatedSquare;\n\n    this.gridLayer.removeChild(\n      this.squareGraphics.get(posKey(animatedSquare.position))!\n    );\n    this.squareGraphics.get(posKey(animatedSquare.position))?.destroy();\n\n    const square = new PIXI.Graphics()\n      .beginFill(0xffffff)\n      .drawShape(\n        new PIXI.RoundedRectangle(position.x, position.y, size, size, 10)\n      );\n    square.tint = DemoColors.squareColors.startsAt;\n    switch (type) {\n      case \"inaccessible\":\n        square.alpha = 1;\n        break;\n      case \"accessible\":\n      case \"accessibleDark\":\n        square.alpha = 0.1;\n        break;\n      case \"initial\":\n      case \"initialDark\":\n        square.alpha = 0.2;\n        break;\n    }\n\n    const duration = 1.0;\n    gsap.to(square, {\n      pixi: {\n        tint: DemoColors.squareColors[animatedSquare.type],\n      },\n      duration,\n      repeat: 0,\n    });\n\n    this.squareGraphics.set(posKey(position), square);\n    this.gridLayer.addChild(square);\n  }\n}\n\nexport type DrawObstacle = {\n  position: DrawPosition;\n  size: DrawSize;\n};\n\nexport type AnimatedGridSquare = {\n  type: GridType;\n  position: DrawPosition;\n  size: number;\n};\n\nexport type DrawPosition = PIXI.IPointData;\nexport type DrawSize = {\n  x: number;\n  y: number;\n};\n\nconst posKey = (pos: DrawPosition): string => {\n  return `${pos.x} ${pos.y}`;\n};\n","import { ButtonGroup, Button } from \"@blueprintjs/core\";\nimport React from \"react\";\nimport { RecoilState, useRecoilValue } from \"recoil\";\nimport { ActionName } from \"../Controllers/Controller\";\n\nexport type DemoAction = {\n  name: ActionName;\n  fn: () => void;\n};\nexport type ReactActionsProps = {\n  actions: RecoilState<DemoAction[]>;\n};\nexport const ControllerActionsView: React.FC<ReactActionsProps> = (props) => {\n  const actions = useRecoilValue(props.actions);\n\n  return (\n    <ButtonGroup large>\n      {actions.map(({ name, fn }) => (\n        <Button onClick={fn} key={name}>\n          {name}\n        </Button>\n      ))}\n    </ButtonGroup>\n  );\n};\n","import { Classes } from \"@blueprintjs/core\";\nimport * as PIXI from \"pixi.js\";\nimport React, { useEffect, useRef } from \"react\";\nimport { style } from \"typestyle\";\nimport { CanvasInfo } from \"../Controllers/CanvasInfo\";\nimport { ControllerProvider } from \"../Controllers/Controller\";\nimport { ObstaclesController } from \"../Controllers/ObstaclesController\";\nimport { NumberColors } from \"../NumberColors\";\nimport { styles } from \"../styles\";\nimport { PixiDrawManager } from \"../Graphics/PixiDrawManager\";\nimport { GraphSolver } from \"../Solvers/Solvers\";\nimport { ControllerActionsView, DemoAction } from \"./ActionsViewer\";\nimport { atom, RecoilState, useSetRecoilState } from \"recoil\";\nimport { ObstacleSet } from \"../Obstacles/ObstacleSets\";\n\nconst canvas: CanvasInfo = {\n  height: 600,\n  width: 900,\n  heroSize: 25,\n  heroPosition: {\n    x: 25,\n    y: 25,\n  },\n  princessPosition: {\n    x: 900 - 25,\n    y: 600 - 25,\n  },\n  padding: 30,\n};\n\nexport type PixiGridViewProps = {\n  solver: GraphSolver;\n  controller: ControllerProvider;\n  obstacleSet: ObstacleSet;\n};\n\nconst graphActions: RecoilState<DemoAction[]> = atom({\n  key: \"graphActions\",\n  default: [] as DemoAction[],\n});\n\nexport const PixiGridView: React.FC<PixiGridViewProps> = (props) => {\n  const ref = useRef<HTMLDivElement>(null);\n  const actionsSetter = useSetRecoilState(graphActions);\n  useEffect(() => {\n    const container = ref.current!;\n\n    PIXI.utils.skipHello();\n\n    // On first render create our application\n    const app = new PIXI.Application({\n      width: canvas.width + 2 * canvas.padding,\n      height: canvas.height + 2 * canvas.padding,\n      backgroundColor: NumberColors.ORANGE1,\n      antialias: true,\n      resolution: 2,\n    });\n    app.stage.pivot.x = -canvas.padding;\n    app.stage.pivot.y = -canvas.padding;\n    app.view.className = styles(canvasStyle, Classes.ELEVATION_3);\n\n    // Add app to DOM\n    container.appendChild(app.view);\n\n    // Start the PixiJS app\n    app.start();\n\n    const drawManager = new PixiDrawManager(app, canvas);\n    const obstaclesController = new ObstaclesController(\n      drawManager,\n      props.obstacleSet\n    );\n    props.controller.get(\n      drawManager,\n      props.solver,\n      obstaclesController,\n      canvas,\n      actionsSetter\n    );\n\n    return () => {\n      for (const textureUrl in PIXI.utils.BaseTextureCache) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        delete PIXI.utils.BaseTextureCache[textureUrl];\n      }\n\n      for (const textureUrl in PIXI.utils.TextureCache) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        delete PIXI.utils.TextureCache[textureUrl];\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      container.removeChild(app.view);\n      // On unload completely destroy the application and all of it's children\n      app.destroy(true, true);\n    };\n  }, [props, actionsSetter]);\n\n  return (\n    <div>\n      <div ref={ref} />\n      <header className={headerStyle}>\n        <ControllerActionsView actions={graphActions} />\n      </header>\n    </div>\n  );\n};\n\nconst canvasStyle = style({\n  borderRadius: 10,\n  height: 745,\n  width: 1100,\n});\n\nconst headerStyle = style({\n  display: \"flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  padding: 5,\n});\n","export const styles = (...styles: string[]) => {\n    return styles.join(\" \");\n}","import { Button, ButtonGroup, Classes } from \"@blueprintjs/core\";\nimport React from \"react\";\nimport { atom, useRecoilState } from \"recoil\";\nimport { classes, style } from \"typestyle\";\nimport { ControllerProvider } from \"../Controllers/Controller\";\nimport { GridAlgorithmsController } from \"../Controllers/GridController\";\nimport { LessonController } from \"../Controllers/LessonController\";\nimport { VisibilityGraphController } from \"../Controllers/VisibilityGraphController\";\nimport { VoronoiController } from \"../Controllers/VoronoiController\";\nimport { obstacles, ObstacleSet } from \"../Obstacles/ObstacleSets\";\nimport { AStarSolver } from \"../Solvers/AStarSolver\";\nimport {\n  GraphSolverMode,\n  SimpleGraphSolver,\n} from \"../Solvers/SimpleGraphSolver\";\nimport { GraphSolver } from \"../Solvers/Solvers\";\nimport { PixiGridView } from \"./SolverView\";\n\nconst solvers: GraphSolver[] = [\n  new SimpleGraphSolver(true, GraphSolverMode.DFS),\n  new SimpleGraphSolver(true, GraphSolverMode.BFS),\n  new SimpleGraphSolver(false, GraphSolverMode.BFS),\n  new SimpleGraphSolver(false, GraphSolverMode.DFS),\n  new AStarSolver(),\n];\n\nconst providers: ControllerProvider[] = [\n  GridAlgorithmsController.provider,\n  VoronoiController.provider,\n  VisibilityGraphController.provider,\n  LessonController.provider,\n];\n\nconst ctrlProviderState = atom<ControllerProvider>({\n  key: \"controllerProvider\",\n  default: GridAlgorithmsController.provider,\n});\nconst solverState = atom<GraphSolver>({\n  key: \"graphSolver\",\n  default: solvers[0],\n});\nconst obstacleSetState = atom<ObstacleSet>({\n  key: \"obstacleSet\",\n  default: obstacles[0],\n});\n\nexport const DemoPage: React.FC = () => {\n  const [controllerProvider, setControllerProvider] =\n    useRecoilState(ctrlProviderState);\n  const [solver, setSolver] = useRecoilState(solverState);\n  const [obstacleSet, setObstacles] = useRecoilState(obstacleSetState);\n  return (\n    <div className={classes(demoPageStyle, Classes.DARK)}>\n      <div className={paramsStyle}>\n        <h3>Graph Type</h3>\n        <ButtonGroup vertical minimal>\n          {providers.map((p) => (\n            <Button\n              key={p.name}\n              active={controllerProvider === p}\n              onClick={() => setControllerProvider(p)}\n            >\n              {p.name}\n            </Button>\n          ))}\n        </ButtonGroup>\n\n        <h3>Solver</h3>\n        <ButtonGroup vertical minimal>\n          {solvers.map((s) => (\n            <Button\n              key={s.name}\n              active={solver === s}\n              onClick={() => setSolver(s)}\n            >\n              {s.name}\n            </Button>\n          ))}\n        </ButtonGroup>\n\n        <h3>Map</h3>\n        <ButtonGroup vertical minimal>\n          {obstacles.map((o) => (\n            <Button\n              key={o.name}\n              active={obstacleSet === o}\n              onClick={() => setObstacles(o)}\n            >\n              {o.name}\n            </Button>\n          ))}\n        </ButtonGroup>\n      </div>\n      <div className={contentStyle}>\n        <PixiGridView\n          key={solver.name + controllerProvider.name + obstacleSet.name}\n          solver={solver}\n          controller={controllerProvider}\n          obstacleSet={obstacleSet}\n        />\n      </div>\n    </div>\n  );\n};\n\nconst demoPageStyle = style({\n  display: \"flex\",\n  flex: 1,\n});\n\nconst contentStyle = style({\n  padding: 20,\n  display: \"flex\",\n  justifyContent: \"center\",\n  alignContent: \"center\",\n  flex: 1,\n});\n\nconst paramsStyle = style({\n  width: 200,\n  padding: 10,\n});\n","import \"normalize.css/normalize.css\";\nimport \"./App.css\";\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\nimport {\n  BrowserRouter as Router,\n} from \"react-router-dom\";\nimport { style } from \"typestyle\";\nimport { Colors } from \"@blueprintjs/core\";\nimport { RecoilRoot } from \"recoil\";\nimport { DemoPage } from \"./Views/DemoPage\";\n\n\nfunction App() {\n  return (\n    <RecoilRoot>\n      <Router>\n        <div className={appStyle}>\n          <DemoPage />\n        </div>\n      </Router>\n    </RecoilRoot>\n  );\n}\n\nconst appStyle = style({\n  display: \"flex\",\n  height: \"100%\",\n  width: \"100%\",\n  backgroundColor: Colors.DARK_GRAY1,\n});\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport gsap from \"gsap\";\nimport * as PIXI from \"pixi.js\";\nimport { PixiPlugin } from \"gsap/PixiPlugin\";\n// register the plugin\ngsap.registerPlugin(PixiPlugin);\n\n// give the plugin a reference to the PIXI object\nPixiPlugin.registerPIXI(PIXI);\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}